**Техническое задание на систему синхронизации конфигурации серверов gieck **

**1. Общие сведения**
Система gieck предназначена для синхронизации конфигурационных файлов серверов с репозиторием GitHub.

Система должна:
- Считывать настройки из конфигурационного файла `gieck.conf`;
- Работать по расписанию через systemd-timer (расписание задаётся в `gieck.conf` в формате cron) при установке программы;
- Хранить конфигурации серверов в репозитории GitHub (Lexx178/gieck/) - репозиторий указывается в конфигурационном файле, доступ происходит по ssh ключу репозитория;
- Синхронизировать файлы, каталоги и выводы команд, включая их структуру;
- Логировать все действия в `gieck.log` с контролем размера файла логов - указывается в конфигурационном файле.;
- Автоматически устанавливаться через `install`;
- Пользователь программы в linux - root
- Написана на golang
- Работает с github через библиотеки golang, без установки git
- В случае возникновения серьезных ошибок мешающих продолжить работу, например github недоступен, прерывать работу программы.
- В случае возникновения не серьезных ошибок не мешающих продолжить работу, например не удалось получить доступ к одному файлу, записывать WARNING в лог и продолжать работу программы.
- Имена файлов, созданных из команд, должны быть приведены к безопасному формату, в котором:
	Все символы переведены в нижний регистр.
	Пробелы заменяются на символ подчеркивания (_).
	Убираются все символы, кроме английских букв (строчных и заглавных), цифр, подчеркиваний и дефисов.
	Пример: Исходное имя файла: _fdisk --list-details Преобразованное имя файла: fdisk_list_details
- При установке программы автоматически настраиваются systemd unit-файлы для выполнения задачи синхронизации, обновлений и логирования по расписанию.
	Система должна создавать следующие unit-файлы:
	gieck-sync.service — для выполнения синхронизации.
	gieck-sync.timer — для запуска gieck-sync.service по расписанию.
	Аналогично, для других задач (например, для логирования и обновлений) создаются unit-файлы gieck-logger.service, gieck-logger.timer, gieck-update.service, gieck-update.timer.


**2a. Расположение файлов**
Файлы и каталоги расположены с полными путями. Если путь заканчивается на `/`, это каталог, иначе - файл.

Пример:
- Локально: `/opt/gieck/localrep/sync/etc/fstab`, `/opt/gieck/localrep/cmd/nft list ruleset`, `/opt/gieck/localrep/sync/home/root/.ssh/`
- В GitHub: `Lexx178/gieck/sync/etc/fstab`, `Lexx178/gieck/cmd/nft list ruleset`, `Lexx178/gieck/sync/home/root/.ssh/`

**2b. Каталоги программы**
`/opt/gieck/` - каталог программы
`/opt/gieck/bin/` - каталог испольняемых файлов
`/opt/gieck/conf/` - каталог настроек программы
`/opt/gieck/log/` - каталог логов программы
`/opt/gieck/localrep/` - каталог локального репозитория
`/opt/gieck/localrep/sync/` - каталог хранения копий файлов для сравнения контрольных сумм - синхронизируется с github
`/opt/gieck/localrep/cmd/new/` - каталог хранения текущих результатов выполнения команд - не синхронизируется с github
`/opt/gieck/localrep/cmd/old/` - каталог хранения прошлых результатов выполнения команд - синхронизируется с github


**3. Файлы программы**

1) **Файл списка для синхронизации** - `название_сервера.sync`
   - Локально: `/opt/gieck/conf/`
   - В GitHub: `Lexx178/gieck/conf/`
   - Содержит список файлов  каталогов для синхронизации.
   - Может содержать команды, начинающиеся с `_`.
   - Если файл отсутствует, создается копированием `template.sync`.
   **A. Особенности и порядок обработки строк**
   - Если строка начинается с `#`, она игнорируется.
   - Если строка начинается с `_`, это команда. Которую нужно выполнить и результать поместить в файл по пути `/opt/gieck/localrep/cmd/new/`.
   - Если строка начинается с `/`, проверить это каталог или файл, если каталог то обрабатывать все файлы в нём.

===
#Пример zbx1.sync:

/etc/
/opt/gieck/
/home/root/
_fdisk --list-details
_ip a
===

2) **Файл игнорирования** - `название_сервера.ignore`
   - Локально: `/opt/gieck/conf/`
   - В GitHub: `Lexx178/gieck/conf/`
   - Определяет файлы, которые нужно исключить из синхронизации.

===
#Пример zbx1.ignore:

/etc/shadow
/etc/shadow-
/opt/gieck/log/gieck.log
===

3) **Файл скрипта синхронизации** - `sync`
   - Локально: `/opt/gieck/bin/`
   - В GitHub: `Lexx178/gieck/bin/`
   - Написан на Golang
   - Проверяет блоки timer и update в концфигурации и при необходимости вносит изменения в таймеры systemd-timer
   - обрабатывает файлы, каталоги и команды из `название_сервера.sync`
   - убеждается что проверяемого файла нет в `название_сервера.ignore`
   - если файл это ссылка то переходит работает с файлом по ней
   - убеждается что проверяемый файл не превышает max_file_size
   - проверяет контрольные суммы (например оригинальный файл `/etc/fstab` и его сохраненного 
   значения в файле check.sum, а при отстутствии сохраненного значения проверяет контрольную сумму копии в локальном репозитории `/opt/gieck/localrep/sync/etc/fstab`),
   - копирует файлы в локальный репозиторий если контрольная сумма различается или файла нет в локальном репозитории, и обновлет контрольные суммы в check.sum.
   - синхронизирует локальный репозиторий на GitHub (commit и push вродебы), в сообщения коммита пишет что изменилось (например Changed: /etc/fstab, Deleted: /root/test.txt)

3) **Файл скрипта управления логами** - `logger`
   - Локально: `/opt/gieck/bin/`
   - В GitHub: `Lexx178/gieck/bin/`
   - Написан на Bash
   - контролирует размер лога, если размер превышает лимит, оставляет только последние 70% записей.

4) **Файл логов** - `gieck.log`
   - Локально: `/opt/gieck/log/`
   - В GitHub: отсутствует.
   - Логирует все действия, на английском языке.
   - Все строки логов начинаются с уровня записи (OK, WARNING, ERROR).
   - Cтроки логов с датой будут начинатся на DATE
   - Cтроки логов с названием исполняемого файла будут начинатся на BIN
   - Cтроки логов с разделителем будут начинатся на SPACE
   - При каждом запуске программ (sync,update, logger) первый лог это время и дата.

===
#Пример gieck.log

   SPACE: -----------------------------
   BIN: bin/sync
   DATE: Ср 26 мар 2025 22:50:46 MSK
   OK: All good.
   WARNING: Some problem.
   SPACE: -----------------------------
   BIN: bin/logger
   DATE: Ср 26 мар 2025 00:50:46 MSK
   ERROR:  CRITICAL ERROR, EXIT!!!
===

5) **Файл установки программы** - `install.sh`
   - Локально: `/opt/gieck/bin/`
   - В GitHub: `Lexx178/gieck/bin/`
   - Написан на Bash
   - Пользователь вручную загружает его с github и запускает.
   - Скрипт скачивает остальные файлы программы с репозитория программы.
   - install после проверяет наличие конфигурационного файла, при необходимости скачивает его с github,
   заменяет в gieck.conf {hostname} на имя сервера,
   выводит на экран его содержимое и дважды запрашивает подтверждение установки с этими настройками. (WARNING: ARE YOU SURE NEED TO INSTALL WITH THESE SETTINGS?)
   - Настраивает окружение пользователя.
   - Создает каталоги программы.
   - Задает права на каталог программы 0770
   - Настраивает systemd-timer
   - Проводит инициализацию репозитория синхронизации, git clone
   - При отсутствии файлов sync и ignore в них копируется содержимое из template.sync и template.ignore.
   - В конце выводит предупреждение: "ATTENTION: Make sure that you have configured the SSH deployment key in GitHub and created a synchronization repository."

6) **Файл шаблона списка синхронизации** - `template.sync`
   - Локально: `/opt/gieck/conf/`
   - В GitHub: `Lexx178/gieck/conf/`

===
#Пример template.sync:

#/etc/
#/opt/gieck/
#/root/
#_fdisk --list-details
#_ip a
#/var/spool/cron/crontabs/
===

7) **Файл шаблона игнорирования** - `template.ignore`
   - Локально: `/opt/gieck/conf/`
   - В GitHub: `Lexx178/gieck/conf/`
   
===
#Пример template.ignore:

#/etc/shadow
#/etc/shadow-
#/opt/gieck/log/gieck.log
===

8) **Файл обновления программы** - `update`
   - Локально: `/opt/gieck/bin/`
   - В GitHub: `Lexx178/gieck/bin/`
   - Написан на Bash.
   - Обновляет файлы программы (sync, logger, update, template.sync, template.ignore) с заменой с репозитория программы на GitHub.


9) **Файл настроек** - `gieck.conf`
   - Локально: `/opt/gieck/conf/`
   - В GitHub: `Lexx178/gieck/conf/`
   - Содержит: имя сервера, репозиторий, локальный каталог, параметры Telegram-бота, максимальный размер логов, расписание cron, время уведомлений.

===
#Пример gieck.conf:
# Комментарии в этом примере для удобства, в реальном файле их не будет.

[install]											# Параметры инсталятора
install_repo = git@github.com:Lexx178/gieck.git			# Репозиторий программы
hostname = debtests2									# Заполняется при установке именем сервера, также создается файл с `этим_значением.conf`. Имя берется из команды hostname.

[main]												# Параметры основные
sync_repo = git@github.com:Lexx178/{hostname}.git		# Репозиторий синхронизации
gieck_path = /opt/gieck/								# Путь к каталогу программы
ssh_key = /opt/gieck/conf/{hostname}					# Путь к ключу для подключения к github

[logs]												# Параметры логов
logs_max_size = 10M										# Максимальный размер логов
logs_path = /opt/gieck/log/gieck.log					# Путь к файлу логов

[sync]												# Параметры для синхронизации
max_file_size = 1M										# Максимальный размер файла для синхронизации


[timer]												# Параметры для systemd-timer
sync = */5 * * * * /opt/gieck/bin/sync					# Периодичность запуска синхронизации
logger = 2 19 * * * /opt/gieck/bin/logger   			# Периодичность запуска обработки логов
update = 0 3 * * * /opt/gieck/bin/update   			# Периодичность запуска обновлений

#Если update_enable = no то timer {gieck_path}bin/update деактивируется
[update]											# Параметры для обновления
update_enable = no										# Включены ли обновления
===

10) **Файл с контрольными суммами MD5 синхронизируемых файлов** - check.sum
   - Локально: `/opt/gieck/localrep/`
   - В GitHub: отсутствует.

===
#Пример check.sum:

99bba1e4bcd52cb701b5b3afc5f92646  /etc/fstab
154570c867cf1bd9bfafe1e7b5d174a9  /etc/passwd
===